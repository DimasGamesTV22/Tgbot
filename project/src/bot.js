import TelegramBot from 'node-telegram-bot-api';
import moment from 'moment';
import logger from './logger';
import dotenv from 'dotenv';
import schedule from 'node-schedule';
import NodeCache from 'node-cache';
import { format } from 'date-fns';
import axios from 'axios';
import sanitizeHtml from 'sanitize-html';
import validator from 'validator';

dotenv.config();

// Initialize bot with token from environment variables
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// Initialize cache for rate limiting and temporary data
const cache = new NodeCache({ stdTTL: 3600 });

// Initialize collections
const repairRequests = new Map();
const userPoints = new Map();
const rateLimits = new Map();
const userSettings = new Map();
const notifications = new Map();

// Initialize repair services
const repairServices = [
  { id: 'service_1', name: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ü–ö', price: 1500, description: '–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞', duration: '1-2 —á–∞—Å–∞' },
  { id: 'service_2', name: '–ß–∏—Å—Ç–∫–∞ –æ—Ç –ø—ã–ª–∏', price: 2000, description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –æ—Ç –ø—ã–ª–∏', duration: '1-2 —á–∞—Å–∞' },
  { id: 'service_3', name: '–ó–∞–º–µ–Ω–∞ —Ç–µ—Ä–º–æ–ø–∞—Å—Ç—ã', price: 1000, description: '–ó–∞–º–µ–Ω–∞ —Ç–µ—Ä–º–æ–ø–∞—Å—Ç—ã –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ', duration: '30-60 –º–∏–Ω—É—Ç' },
  { id: 'service_4', name: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows', price: 2500, description: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Windows', duration: '2-3 —á–∞—Å–∞' },
  { id: 'service_5', name: '–ó–∞–º–µ–Ω–∞ HDD/SSD', price: 1500, description: '–ó–∞–º–µ–Ω–∞ –∂–µ—Å—Ç–∫–æ–≥–æ –¥–∏—Å–∫–∞ –∏–ª–∏ SSD', duration: '1-2 —á–∞—Å–∞' },
  { id: 'service_6', name: '–°–±–æ—Ä–∫–∞ –ü–ö', price: 5000, description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞', duration: '2-4 —á–∞—Å–∞' }
];

// Initialize special offers
const specialOffers = [
  { id: 'offer_1', name: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', price: 3000, points: 450, description: '–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ + —á–∏—Å—Ç–∫–∞ –æ—Ç –ø—ã–ª–∏', duration: '2-3 —á–∞—Å–∞' },
  { id: 'offer_2', name: '–ë–∞–∑–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', price: 2500, points: 250, description: '–ß–∏—Å—Ç–∫–∞ –æ—Ç –ø—ã–ª–∏ + –∑–∞–º–µ–Ω–∞ —Ç–µ—Ä–º–æ–ø–∞—Å—Ç—ã', duration: '2-3 —á–∞—Å–∞' },
  { id: 'offer_3', name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç', price: 7000, points: 750, description: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ + —á–∏—Å—Ç–∫–∞ + Windows + —Ç–µ—Ä–º–æ–ø–∞—Å—Ç–∞', duration: '4-6 —á–∞—Å–æ–≤' }
];

// Initialize help topics
const helpTopics = {
  general: {
    title: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
    content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PC Repair Bot!\n\n' +
      '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n' +
      '‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n' +
      '‚Ä¢ –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö\n' +
      '‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞\n' +
      '‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è'
  },
  services: {
    title: '–£—Å–ª—É–≥–∏',
    content: '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n\n' +
      '‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n' +
      '‚Ä¢ –ß–∏—Å—Ç–∫–∞ –æ—Ç –ø—ã–ª–∏\n' +
      '‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ç–µ—Ä–º–æ–ø–∞—Å—Ç—ã\n' +
      '‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows\n' +
      '‚Ä¢ –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö\n' +
      '‚Ä¢ –°–±–æ—Ä–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n\n' +
      '–ö–∞–∂–¥–∞—è —É—Å–ª—É–≥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.'
  },
  loyalty: {
    title: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
    content: '–ó–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã:\n\n' +
      '‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–º–æ–Ω—Ç: 100-500 –±–∞–ª–ª–æ–≤\n' +
      '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –¥–æ 750 –±–∞–ª–ª–æ–≤\n\n' +
      '–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –Ω–∞ –±—É–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã.\n' +
      '–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤.'
  },
  contact: {
    title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
    content: '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n' +
      'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n' +
      'üìß Email: support@pcrepair.com\n' +
      'üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n\n' +
      '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n' +
      '–ü–Ω-–ü—Ç: 9:00 - 20:00\n' +
      '–°–±-–í—Å: 10:00 - 18:00'
  },
  creator: {
    title: '–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ',
    content: '–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @dmitryilife\n' +
      '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n' +
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n' +
      '‚Ä¢ GitHub: github.com/dmitryilife\n' +
      '‚Ä¢ LinkedIn: linkedin.com/in/dmitryilife\n' +
      '‚Ä¢ Email: dmitry@example.com'
  }
};

// Helper functions
const isAdmin = (userId) => {
  const adminIds = process.env.ADMIN_IDS.split(',').map(Number);
  return adminIds.includes(userId);
};

const rateLimit = (userId) => {
  const now = Date.now();
  const limit = rateLimits.get(userId);
  
  if (!limit || now - limit > 2000) {
    rateLimits.set(userId, now);
    return true;
  }
  return false;
};

const getUserPoints = (userId) => {
  return userPoints.get(userId) || 0;
};

const addUserPoints = (userId, points, reason) => {
  const currentPoints = getUserPoints(userId);
  const newTotal = currentPoints + points;
  userPoints.set(userId, newTotal);
  
  logger.info('Loyalty points added', {
    userId,
    pointsAdded: points,
    reason,
    newTotal
  });
  
  return newTotal;
};

const scheduleReminder = (userId, requestId, time) => {
  const job = schedule.scheduleJob(time, async () => {
    try {
      const request = repairRequests.get(requestId);
      if (request && request.status === 'pending') {
        await bot.sendMessage(
          userId,
          `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ #${requestId}\n` +
          '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞!'
        );
      }
    } catch (error) {
      logger.error('Error sending reminder', { error, userId, requestId });
    }
  });
  
  notifications.set(requestId, job);
};

const validatePhoneNumber = (phone) => {
  return validator.isMobilePhone(phone, 'ru-RU');
};

const sanitizeInput = (input) => {
  return sanitizeHtml(input, {
    allowedTags: [],
    allowedAttributes: {}
  });
};

// Keyboard generators
const getMainKeyboard = (isAdmin) => {
  const keyboard = {
    reply_markup: {
      keyboard: [
        ['üîß –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç', 'üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
        ['üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å'],
        ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
      ],
      resize_keyboard: true
    }
  };

  if (isAdmin) {
    keyboard.reply_markup.keyboard.push(['‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞']);
  }

  return keyboard;
};

const getAdminKeyboard = () => ({
  reply_markup: {
    keyboard: [
      ['üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'üìä –í—Å–µ –∑–∞—è–≤–∫–∏'],
      ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
      ['üì¢ –†–∞—Å—Å—ã–ª–∫–∞', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞'],
      ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ],
    resize_keyboard: true
  }
});

const getServicesKeyboard = () => ({
  reply_markup: {
    inline_keyboard: repairServices.map(service => ([{
      text: `${service.name} - ${service.price}‚ÇΩ`,
      callback_data: service.id
    }]))
  }
});

const getSpecialOffersKeyboard = () => ({
  reply_markup: {
    inline_keyboard: [
      ...specialOffers.map(offer => ([{
        text: `${offer.name} - ${offer.price}‚ÇΩ (${offer.points} –±–∞–ª–ª–æ–≤)`,
        callback_data: offer.id
      }])),
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  }
});

const getHelpKeyboard = () => ({
  reply_markup: {
    inline_keyboard: [
      [{ text: '–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'help_general' }],
      [{ text: '–£—Å–ª—É–≥–∏', callback_data: 'help_services' }],
      [{ text: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'help_loyalty' }],
      [{ text: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'help_contact' }],
      [{ text: '–û —Å–æ–∑–¥–∞—Ç–µ–ª–µ', callback_data: 'help_creator' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  }
});

const getSettingsKeyboard = () => ({
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' }],
      [{ text: 'üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', callback_data: 'settings_contacts' }],
      [{ text: 'üåç –Ø–∑—ã–∫', callback_data: 'settings_language' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  }
});

// Command handlers
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username;
  const adminStatus = isAdmin(userId);

  logger.info('Start command received', {
    userId,
    username,
    isAdmin: adminStatus
  });

  const welcomeMessage = adminStatus
    ? 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'
    : 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PC Repair Bot!\n\n' +
      '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
      '‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞\n' +
      '‚Ä¢ –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã\n' +
      '‚Ä¢ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n' +
      '‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É';

  const keyboard = adminStatus ? getAdminKeyboard() : getMainKeyboard(adminStatus);
  
  await bot.sendMessage(chatId, welcomeMessage, keyboard);
});

// Settings handler
bot.onText(/‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  const settings = userSettings.get(chatId) || {
    notifications: true,
    language: 'ru',
    phone: '',
    email: ''
  };

  let message = '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n' +
    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
    `üåç –Ø–∑—ã–∫: ${settings.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}\n` +
    `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    ...getSettingsKeyboard()
  });
});

// Service handlers
bot.onText(/üîß –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–º–æ–Ω—Ç/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  await bot.sendMessage(
    chatId,
    'üîß –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n' +
    repairServices.map(service =>
      `*${service.name}*\n` +
      `üí∞ –¶–µ–Ω–∞: ${service.price}‚ÇΩ\n` +
      `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration}\n` +
      `üìù ${service.description}\n`
    ).join('\n'),
    {
      parse_mode: 'Markdown',
      ...getServicesKeyboard()
    }
  );
});

// Special offers handler
bot.onText(/üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  await bot.sendMessage(
    chatId,
    'üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n' +
    specialOffers.map(offer =>
      `*${offer.name}*\n` +
      `üí∞ –¶–µ–Ω–∞: ${offer.price}‚ÇΩ\n` +
      `‚≠ê –ë–æ–Ω—É—Å: ${offer.points} –±–∞–ª–ª–æ–≤\n` +
      `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${offer.duration}\n` +
      `üìù ${offer.description}\n`
    ).join('\n'),
    {
      parse_mode: 'Markdown',
      ...getSpecialOffersKeyboard()
    }
  );
});

// Profile handler
bot.onText(/üì± –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  const userRequests = Array.from(repairRequests.values())
    .filter(req => req.userId === userId)
    .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

  const points = getUserPoints(userId);
  const totalSpent = userRequests.reduce((sum, req) => sum + req.finalPrice, 0);
  const settings = userSettings.get(userId) || {};

  let message = 'üì± *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n' +
    `üë§ ID: ${userId}\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `‚≠ê –ë–∞–ª–ª—ã: ${points}\n` +
    `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent}‚ÇΩ\n` +
    `üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${userRequests.length}\n\n`;

  if (userRequests.length > 0) {
    message += '*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n';
    
    for (const request of userRequests.slice(0, 3)) {
      const service = request.isSpecialOffer
        ? specialOffers.find(o => o.id === request.serviceId)
        : repairServices.find(s => s.id === request.serviceId);

      message += `üîß ${service ? service.name : '–£—Å–ª—É–≥–∞'}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${request.finalPrice}‚ÇΩ\n` +
        `üìÖ –î–∞—Ç–∞: ${moment(request.createdAt).format('DD.MM.YYYY HH:mm')}\n` +
        `üìã –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(request.status)}\n\n`;
    }
  }

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', callback_data: 'show_history' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', callback_data: 'settings_profile' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
    ]
  };

  await bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
});

// Help handler
bot.onText(/‚ùì –ü–æ–º–æ—â—å/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.');
    return;
  }

  await bot.sendMessage(
    chatId,
    '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏:',
    getHelpKeyboard()
  );
});

// Admin panel handler
bot.onText(/‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!isAdmin(chatId)) {
    await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return;
  }

  if (!rateLimit(chatId)) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    return;
  }

  await bot.sendMessage(
    chatId,
    '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    getAdminKeyboard()
  );
});

// Broadcast message handler
bot.onText(/üì¢ –†–∞—Å—Å—ã–ª–∫–∞/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!isAdmin(chatId)) {
    await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
    return;
  }

  cache.set(`${chatId}_state`, 'awaiting_broadcast');
  
  await bot.sendMessage(
    chatId,
    'üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
    {
      reply_markup: {
        force_reply: true
      }
    }
  );
});

// Active requests handler
bot.onText(/üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (!isAdmin(chatId)) {
      await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }

    if (!rateLimit(chatId)) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
      return;
    }

    const activeRequests = Array.from(repairRequests.values())
      .filter(req => ['pending', 'in_progress'].includes(req.status))
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    if (activeRequests.length === 0) {
      await bot.sendMessage(chatId, 'üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]]
        }
      });
      return;
    }

    const statusEmoji = {
      pending: '‚è≥',
      in_progress: 'üîß'
    };

    let message = 'üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n';

    for (const request of activeRequests) {
      const service = request.isSpecialOffer 
        ? specialOffers.find(o => o.id === request.serviceId)
        : repairServices.find(s => s.id === request.serviceId);

      const user = await bot.getChatMember(request.userId, request.userId)
        .catch(() => ({ user: { first_name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' } }));

      const settings = userSettings.get(request.userId) || {};

      message += `${statusEmoji[request.status]} –ó–∞—è–≤–∫–∞ #${request.id}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${user.user.first_name}\n` +
        `üì± ID: ${request.userId}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìù ${service ? service.name : '–£—Å–ª—É–≥–∞'}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${request.finalPrice}‚ÇΩ\n` +
        `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${moment(request.createdAt).format('DD.MM.YYYY HH:mm')}\n\n`;
    }

    const keyboard = activeRequests.map(req => ([{
      text: `‚úèÔ∏è –ó–∞—è–≤–∫–∞ #${req.id}`,
      callback_data: `update_${req.id}`
    }]));

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]);

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    logger.error('Error showing active requests', { error, chatId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.');
  }
});

// All requests handler
bot.onText(/üìä –í—Å–µ –∑–∞—è–≤–∫–∏/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (!isAdmin(chatId)) {
      await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }

    if (!rateLimit(chatId)) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
      return;
    }

    const allRequests = Array.from(repairRequests.values())
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    if (allRequests.length === 0) {
      await bot.sendMessage(chatId, 'üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]]
        }
      });
      return;
    }

    const statusEmoji = {
      pending: '‚è≥',
      in_progress: 'üîß',
      completed: '‚úÖ',
      cancelled: '‚ùå'
    };

    let message = 'üìä *–í—Å–µ –∑–∞—è–≤–∫–∏:*\n\n';
    let currentDate = '';

    for (const request of allRequests) {
      const requestDate = moment(request.createdAt).format('DD.MM.YYYY');
      
      if (requestDate !== currentDate) {
        currentDate = requestDate;
        message += `üìÖ *${currentDate}*\n\n`;
      }

      const service = request.isSpecialOffer 
        ? specialOffers.find(o => o.id === request.serviceId)
        : repairServices.find(s => s.id === request.serviceId);

      const settings = userSettings.get(request.userId) || {};

      message += `${statusEmoji[request.status]} –ó–∞—è–≤–∫–∞ #${request.id}\n` +
        `üì± ID –∫–ª–∏–µ–Ω—Ç–∞: ${request.userId}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìù ${service ? service.name : '–£—Å–ª—É–≥–∞'}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${request.finalPrice}‚ÇΩ\n` +
        `‚è∞ –í—Ä–µ–º—è: ${moment(request.createdAt).format('HH:mm')}\n\n`;
    }

    // Split message if it's too long
    const maxLength = 4096;
    if (message.length > maxLength) {
      const parts = message.match(new RegExp(`.{1,${maxLength}}`, 'g'));
      for (const part of parts) {
        await bot.sendMessage(chatId, part, {
          parse_mode: 'Markdown'
        });
      }
    } else {
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]]
        }
      });
    }
  } catch (error) {
    logger.error('Error showing all requests', { error, chatId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.');
  }
});

// Client management handler
bot.onText(/üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (!isAdmin(chatId)) {
      await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }

    if (!rateLimit(chatId)) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
      return;
    }

    // Get unique clients from requests
    const clients = new Map();
    
    for (const request of repairRequests.values()) {
      if (!clients.has(request.userId)) {
        const userRequests = Array.from(repairRequests.values())
          .filter(req => req.userId === request.userId);
        
        const totalSpent = userRequests.reduce((sum, req) => sum + req.finalPrice, 0);
        const points = getUserPoints(request.userId);
        const settings = userSettings.get(request.userId) || {};
        
        clients.set(request.userId, {
          id: request.userId,
          username: request.userName,
          phone: settings.phone,
          email: settings.email,
          requestCount: userRequests.length,
          totalSpent,
          points,
          lastActive: Math.max(...userRequests.map(req => new Date(req.createdAt)))
        });
      }
    }

    const sortedClients = Array.from(clients.values())
      .sort((a, b) => b.totalSpent - a.totalSpent);

    let message = 'üë• *–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n';

    for (const client of sortedClients) {
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n` +
        `üì± ID: ${client.id}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìß Email: ${client.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìä –ó–∞—è–≤–æ–∫: ${client.requestCount}\n` +
        `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${client.totalSpent}‚ÇΩ\n` +
        `‚≠ê –ë–∞–ª–ª—ã: ${client.points}\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${moment(client.lastActive).format('DD.MM.YYYY HH:mm')}\n\n`;
    }

    // Split message if it's too long
    const maxLength = 4096;
    if (message.length > maxLength) {
      const parts = message.match(new RegExp(`.{1,${maxLength}}`, 'g'));
      for (const part of parts) {
        await bot.sendMessage(chatId, part, {
          parse_mode: 'Markdown'
        });
      }
    } else {
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'export_clients' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]
          ]
        }
      });
    }
  } catch (error) {
    logger.error('Error showing clients', { error, chatId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤.');
  }
});

// Statistics handler
bot.onText(/üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    if (!isAdmin(chatId)) {
      await bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
      return;
    }

    if (!rateLimit(chatId)) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
      return;
    }

    const allRequests = Array.from(repairRequests.values());
    const today = moment().startOf('day');
    const thisWeek = moment().startOf('week');
    const thisMonth = moment().startOf('month');
    
    // Calculate statistics
    const stats = {
      total: allRequests.length,
      active: allRequests.filter(r => ['pending', 'in_progress'].includes(r.status)).length,
      completed: allRequests.filter(r => r.status === 'completed').length,
      cancelled: allRequests.filter(r => r.status === 'cancelled').length,
      totalRevenue: allRequests.reduce((sum, req) => sum + req.finalPrice, 0),
      uniqueClients: new Set(allRequests.map(r => r.userId)).size,
      today: {
        requests: allRequests.filter(r => moment(r.createdAt).isAfter(today)).length,
        revenue: allRequests
          .filter(r => moment(r.createdAt).isAfter(today))
          .reduce((sum, req) => sum + req.finalPrice, 0)
      },
      week: {
        requests: allRequests.filter(r => moment(r.createdAt).isAfter(thisWeek)).length,
        revenue: allRequests
          .filter(r => moment(r.createdAt).isAfter(thisWeek))
          .reduce((sum, req) => sum + req.finalPrice, 0)
      },
      month: {
        requests: allRequests.filter(r => moment(r.createdAt).isAfter(thisMonth)).length,
        revenue: allRequests
          .filter(r => moment(r.createdAt).isAfter(thisMonth))
          .reduce((sum, req) => sum + req.finalPrice, 0)
      }
    };

    // Calculate service popularity
    const serviceStats = new Map();
    allRequests.forEach(request => {
      const serviceId = request.serviceId;
      const current = serviceStats.get(serviceId) || 0;
      serviceStats.set(serviceId, current + 1);
    });

    const popularServices = Array.from(serviceStats.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([id, count]) => {
        const service = repairServices.find(s => s.id === id) || 
          specialOffers.find(o => o.id === id);
        return {
          name: service ? service.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞',
          count,
          percentage: Math.round((count / allRequests.length) * 100)
        };
      });

    let message = 'üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n' +
      `üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${stats.total}\n` +
      `‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}\n` +
      `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}\n` +
      `‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: ${stats.cancelled}\n` +
      `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.totalRevenue}‚ÇΩ\n` +
      `üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${stats.uniqueClients}\n\n` +
      '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥:*\n\n' +
      `üìÖ –°–µ–≥–æ–¥–Ω—è:\n` +
      `‚Ä¢ –ó–∞—è–≤–æ–∫: ${stats.today.requests}\n` +
      `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${stats.today.revenue}‚ÇΩ\n\n` +
      `üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è:\n` +
      `‚Ä¢ –ó–∞—è–≤–æ–∫: ${stats.week.requests}\n` +
      `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${stats.week.revenue}‚ÇΩ\n\n` +
      `üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü:\n` +
      `‚Ä¢ –ó–∞—è–≤–æ–∫: ${stats.month.requests}\n` +
      `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${stats.month.revenue}‚ÇΩ\n\n` +
      `üèÜ *–¢–æ–ø 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥:*\n\n`;

    popularServices.forEach((service, index) => {
      message += `${index + 1}. ${service.name}\n` +
        `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${service.count}\n` +
        `‚Ä¢ –î–æ–ª—è: ${service.percentage}%\n\n`;
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç', callback_data: 'detailed_stats' },
          { text: 'üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data: 'export_stats' }
        ],
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]
      ]
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    logger.error('Error showing statistics', { error, chatId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// Return to main menu handler
bot.onText(/üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, async (msg) => {
  const chatId = msg.chat.id;
  bot.emit('text', { text: '/start', chat: { id: chatId } });
});

// Callback query handler
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const action = query.data;

  logger.info('Callback query received', {
    userId,
    action
  });

  try {
    if (action.startsWith('help_')) {
      const topicKey = action.replace('help_', '');
      const topic = helpTopics[topicKey];

      if (topic) {
        await bot.editMessageText(
          `*${topic.title}*\n\n${topic.content}`,
          {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: getHelpKeyboard().reply_markup
          }
        );
      }
    } else if (action === 'back_to_main') {
      await bot.deleteMessage(chatId, query.message.message_id);
      bot.emit('text', { text: '/start', chat: { id: chatId } });
    } else if (action === 'back_to_admin') {
      await bot.deleteMessage(chatId, query.message.message_id);
      bot.emit('text', { text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', chat: { id: chatId } });
    } else if (action.startsWith('service_')) {
      const service = repairServices.find(s => s.id === action);
      if (service) {
        const requestId = Date.now();
        repairRequests.set(requestId, {
          id: requestId,
          userId,
          serviceId: service.id,
          status: 'pending',
          finalPrice: service.price,
          createdAt: new Date(),
          isSpecialOffer: false
        });

        addUserPoints(userId, Math.floor(service.price / 10), 'New repair request');

        // Schedule a reminder for 24 hours
        const reminderTime = new Date();
        reminderTime.setHours(reminderTime.getHours() + 24);
        scheduleReminder(userId, requestId, reminderTime);

        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ "${service.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
          `üî¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${requestId}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ\n` +
          `‚è± –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration}\n\n` +
          `‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${Math.floor(service.price / 10)} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!\n\n` +
          '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n' +
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.',
          {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
            }
          }
        );

        // Notify admins about new request
        const adminIds = process.env.ADMIN_IDS.split(',');
        for (const adminId of adminIds) {
          await bot.sendMessage(
            adminId,
            `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${requestId}\n\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${userId}\n` +
            `üìù –£—Å–ª—É–≥–∞: ${service.name}\n` +
            `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${moment().format('DD.MM.YYYY HH:mm')}`
          );
        }
      }
    } else if (action.startsWith('offer_')) {
      const offer = specialOffers.find(o => o.id === action);
      if (offer) {
        const requestId = Date.now();
        repairRequests.set(requestId, {
          id: requestId,
          userId,
          serviceId: offer.id,
          status: 'pending',
          finalPrice: offer.price,
          createdAt: new Date(),
          isSpecialOffer: true
        });

        addUserPoints(userId, offer.points, 'Special offer purchase');

        // Schedule a reminder for 24 hours
        const reminderTime = new Date();
        reminderTime.setHours(reminderTime.getHours() + 24);
        scheduleReminder(userId, requestId, reminderTime);

        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–∫–∞–∑ "${offer.name}" —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
          `üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${requestId}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${offer.price}‚ÇΩ\n` +
          `‚è± –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${offer.duration}\n\n` +
          `‚≠ê –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${offer.points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!\n\n` +
          '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n' +
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è.',
          {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
            }
          }
        );

        // Notify admins about new request
        const adminIds = process.env.ADMIN_IDS.split(',');
        for (const adminId of adminIds) {
          await bot.sendMessage(
            adminId,
            `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${requestId} (–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${userId}\n` +
            `üìù –£—Å–ª—É–≥–∞: ${offer.name}\n` +
            `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${offer.price}‚ÇΩ\n` +
            `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${moment().format('DD.MM.YYYY HH:mm')}`
          );
        }
      }
    } else if (action.startsWith('update_')) {
      const requestId = parseInt(action.replace('update_', ''));
      const request = repairRequests.get(requestId);

      if (request && isAdmin(userId)) {
        const service = request.isSpecialOffer
          ? specialOffers.find(o => o.id === request.serviceId)
          : repairServices.find(s => s.id === request.serviceId);

        const settings = userSettings.get(request.userId) || {};

        const statusKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏', callback_data: `status_${requestId}_pending` },
                { text: 'üîß –í —Ä–∞–±–æ—Ç–µ', callback_data: `status_${requestId}_in_progress` }
              ],
              [
                { text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data: `status_${requestId}_completed` },
                { text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', callback_data: `status_${requestId}_cancelled` }
              ],
              [
                { text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: `comment_${requestId}` },
                { text: 'üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è', callback_data: `schedule_${requestId}` }
              ],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_admin' }]
            ]
          }
        };

        await bot.editMessageText(
          `*–ó–∞—è–≤–∫–∞ #${requestId}*\n\n` +
          `üë§ –ö–ª–∏–µ–Ω—Ç ID: ${request.userId}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üìù –£—Å–ª—É–≥–∞: ${service ? service.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞'}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${request.finalPrice}‚ÇΩ\n` +
          `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${moment(request.createdAt).format('DD.MM.YYYY HH:mm')}\n` +
          `üìã –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(request.status)}\n` +
          (request.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${request.comment}\n` : '') +
          (request.scheduledTime ? `‚è∞ –ù–∞–∑–Ω–∞—á–µ–Ω–æ –≤—Ä–µ–º—è: ${moment(request.scheduledTime).format('DD.MM.YYYY HH:mm')}\n` : ''),
          {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'Markdown',
            ...statusKeyboard
          }
        );
      }
    } else if (action.startsWith('status_')) {
      const [, requestId, newStatus] = action.split('_');
      const request = repairRequests.get(parseInt(requestId));

      if (request && isAdmin(userId)) {
        request.status = newStatus;
        await bot.answerCallbackQuery(query.id, { text: '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω' });
        
        // Cancel reminder if exists
        const reminder = notifications.get(parseInt(requestId));
        if (reminder) {
          reminder.cancel();
          notifications.delete(parseInt(requestId));
        }

        // Notify client about status change
        const statusMessages = {
          pending: '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
          in_progress: 'üîß –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
          completed: '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
          cancelled: '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        };

        const service = request.isSpecialOffer
          ? specialOffers.find(o => o.id === request.serviceId)
          : repairServices.find(s => s.id === request.serviceId);

        await bot.sendMessage(
          request.userId,
          `üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #${requestId}\n\n` +
          `üìù –£—Å–ª—É–≥–∞: ${service ? service.name : '–£—Å–ª—É–≥–∞'}\n` +
          statusMessages[newStatus] +
          (newStatus === 'completed' ? '\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!' : '')
        );

        // Return to active requests list
        bot.emit('text', { text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏', chat: { id: chatId } });
      }
    } else if (action.startsWith('comment_')) {
      const requestId = parseInt(action.replace('comment_', ''));
      
      if (isAdmin(userId)) {
        cache.set(`${chatId}_state`, `awaiting_comment_${requestId}`);
        
        await bot.sendMessage(
          chatId,
          'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ:',
          {
            reply_markup: {
              force_reply: true
            }
          }
        );
      }
    } else if (action.startsWith('schedule_')) {
      const requestId = parseInt(action.replace('schedule_', ''));
      
      if (isAdmin(userId)) {
        cache.set(`${chatId}_state`, `awaiting_schedule_${requestId}`);
        
        await bot.sendMessage(
          chatId,
          'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:mm:',
          {
            reply_markup: {
              force_reply: true
            }
          }
        );
      }
    } else if (action === 'export_stats') {
      if (isAdmin(userId)) {
        const allRequests = Array.from(repairRequests.values());
        
        // Generate CSV data
        let csv = 'ID,User ID,Service,Price,Status,Created At\n';
        
        for (const request of allRequests) {
          const service = request.isSpecialOffer
            ? specialOffers.find(o => o.id === request.serviceId)
            : repairServices.find(s => s.id === request.serviceId);
            
          csv += `${request.id},${request.userId},"${service ? service.name : 'Unknown'}",${request.finalPrice},${request.status},"${moment(request.createdAt).format('YYYY-MM-DD HH:mm:ss')}"\n`;
        }
        
        // Create temporary file
        const filename = `statistics_${moment().format('YYYY-MM-DD_HH-mm')}.csv`;
        
        await bot.sendDocument(chatId, Buffer.from(csv), {
          filename,
          caption: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ CSV'
        });
      }
    } else if (action === 'export_clients') {
      if (isAdmin(userId)) {
        const clients = new Map();
        
        for (const request of repairRequests.values()) {
          if (!clients.has(request.userId)) {
            const userRequests = Array.from(repairRequests.values())
              .filter(req => req.userId === request.userId);
            
            const settings = userSettings.get(request.userId) || {};
            
            clients.set(request.userId, {
              id: request.userId,
              phone: settings.phone || '',
              email: settings.email || '',
              totalOrders: userRequests.length,
              totalSpent: userRequests.reduce((sum, req) => sum + req.finalPrice, 0),
              points: getUserPoints(request.userId),
              lastActive: Math.max(...userRequests.map(req => new Date(req.createdAt)))
            });
          }
        }
        
        // Generate CSV data
        let csv = 'User ID,Phone,Email,Total Orders,Total Spent,Points,Last Active\n';
        
        for (const client of clients.values()) {
          csv += `${client.id},"${client.phone}","${client.email}",${client.totalOrders},${client.totalSpent},${client.points},"${moment(client.lastActive).format('YYYY-MM-DD HH:mm:ss')}"\n`;
        }
        
        // Create temporary file
        const filename = `clients_${moment().format('YYYY-MM-DD_HH-mm')}.csv`;
        
        await bot.sendDocument(chatId, Buffer.from(csv), {
          filename,
          caption: 'üë• –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV'
        });
      }
    } else if (action.startsWith('settings_')) {
      const setting = action.replace('settings_', '');
      const settings = userSettings.get(userId) || {};
      
      switch (setting) {
        case 'notifications':
          settings.notifications = !settings.notifications;
          userSettings.set(userId, settings);
          
          await bot.answerCallbackQuery(query.id, {
            text: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${settings.notifications ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`
          });
          break;
          
        case 'contacts':
          cache.set(`${chatId}_state`, 'awaiting_phone');
          
          await bot.sendMessage(
            chatId,
            'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
            {
              reply_markup: {
                force_reply: true
              }
            }
          );
          break;
          
        case 'language':
          // For future implementation
          await bot.answerCallbackQuery(query.id, {
            text: 'üåç –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏'
          });
          break;
      }
      
      // Update settings message
      await bot.editMessageText(
        '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n' +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
        `üåç –Ø–∑—ã–∫: ${settings.language === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English'}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${settings.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìß Email: ${settings.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          parse_mode: 'Markdown',
          ...getSettingsKeyboard()
        }
      );
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    logger.error('Error handling callback query', { error, action });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
});

// Message handler for collecting additional information
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const state = cache.get(`${chatId}_state`);
  
  if (!state) return;
  
  try {
    if (state === 'awaiting_broadcast' && isAdmin(userId)) {
      const message = sanitizeInput(msg.text);
      const clients = new Set(Array.from(repairRequests.values()).map(req => req.userId));
      
      let successCount = 0;
      let failCount = 0;
      
      for (const clientId of clients) {
        try {
          await bot.sendMessage(clientId, `üì¢ *–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n${message}`, {
            parse_mode: 'Markdown'
          });
          successCount++;
        } catch (error) {
          failCount++;
          logger.error('Error sending broadcast message', { error, clientId });
        }
      }
      
      await bot.sendMessage(
        chatId,
        `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n` +
        `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
        `‚ùå –û—à–∏–±–æ–∫: ${failCount}`
      );
      
      cache.del(`${chatId}_state`);
    } else if (state.startsWith('awaiting_comment_')) {
      const requestId = parseInt(state.replace('awaiting_comment_', ''));
      const request = repairRequests.get(requestId);
      
      if (request && isAdmin(userId)) {
        request.comment = sanitizeInput(msg.text);
        
        await bot.sendMessage(
          chatId,
          'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ',
          {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ', callback_data: `update_${requestId}` }]]
            }
          }
        );
        
        cache.del(`${chatId}_state`);
      }
    } else if (state.startsWith('awaiting_schedule_')) {
      const requestId = parseInt(state.replace('awaiting_schedule_', ''));
      const request = repairRequests.get(requestId);
      
      if (request && isAdmin(userId)) {
        const scheduledTime = moment(msg.text, 'DD.MM.YYYY HH:mm');
        
        if (scheduledTime.isValid()) {
          request.scheduledTime = scheduledTime.toDate();
          
          // Schedule notification for client
          const reminderTime = moment(scheduledTime).subtract(2, 'hours');
          if (reminderTime.isAfter(moment())) {
            scheduleReminder(request.userId, requestId, reminderTime.toDate());
          }
          
          // Notify client
          await bot.sendMessage(
            request.userId,
            `üìÖ –î–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ #${requestId} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤—Ä–µ–º—è:\n` +
            `${scheduledTime.format('DD.MM.YYYY HH:mm')}\n\n` +
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∑–∞ 2 —á–∞—Å–∞ –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.'
          );
          
          await bot.sendMessage(
            chatId,
            'üìÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ',
            {
              reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–µ', callback_data: `update_${requestId}` }]]
              }
            }
          );
        } else {
          await bot.sendMessage(
            chatId,
            '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (DD.MM.YYYY HH:mm):'
          );
          return;
        }
        
        cache.del(`${chatId}_state`);
      }
    } else if (state === 'awaiting_phone') {
      const phone = msg.text.trim();
      
      if (validatePhoneNumber(phone)) {
        const settings = userSettings.get(userId) || {};
        settings.phone = phone;
        userSettings.set(userId, settings);
        
        cache.set(`${chatId}_state`, 'awaiting_email');
        
        await bot.sendMessage(
          chatId,
          'üìß –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:'
        );
      } else {
        await bot.sendMessage(
          chatId,
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        );
      }
    } else if (state === 'awaiting_email') {
      const email = msg.text.trim();
      
      if (validator.isEmail(email)) {
        const settings = userSettings.get(userId) || {};
        settings.email = email;
        userSettings.set(userId, settings);
        
        await bot.sendMessage(
          chatId,
          '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',
          {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_profile' }]]
            }
          }
        );
        
        cache.del(`${chatId}_state`);
      } else {
        await bot.sendMessage(
          chatId,
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        );
      }
    }
  } catch (error) {
    logger.error('Error handling message', { error, chatId, state });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    cache.del(`${chatId}_state`);
  }
});

// Helper function for status emoji
const getStatusEmoji = (status) => {
  const statusMap = {
    pending: '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
    in_progress: 'üîß –í —Ä–∞–±–æ—Ç–µ',
    completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  return statusMap[status] || status;
};

// Error handler for unhandled rejections
process.on('unhandledRejection', (error) => {
  logger.error('Unhandled rejection', { error });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  logger.info('Received SIGTERM signal');
  process.exit(0);
});

logger.info('PC Repair Bot started successfully');